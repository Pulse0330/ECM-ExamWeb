"use client";

import React, { useState, useEffect, useRef } from "react";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogFooter,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";

// -----------------------
// ExamProctor (desktop + mobile friendly)
export const ExamProctor: React.FC<{
  userId: string;
  onSubmit: () => void;
  onLogout?: () => void;
  maxSwitch?: number;
}> = ({ userId, onSubmit, onLogout, maxSwitch = 3 }) => {
  const [switchCount, setSwitchCount] = useState(0);
  const [blocked, setBlocked] = useState(false);
  const [dialogMessage, setDialogMessage] = useState<string | null>(null);
  const [blackScreen, setBlackScreen] = useState(false);

  const blockedRef = useRef(false);
  const switchLockRef = useRef(false);

  const handleSwitch = (message?: string) => {
    if (blockedRef.current || switchLockRef.current) return;
    switchLockRef.current = true;

    setSwitchCount((prev) => {
      const next = prev + 1;
      if (next >= maxSwitch) {
        blockedRef.current = true;
        setBlocked(true);
        setDialogMessage("üö´ –¢–∞ 3 —É–¥–∞–∞ tab —Å–æ–ª—å—Å–æ–Ω —Ç—É–ª —à–∞–ª–≥–∞–ª—Ç —Ö–∞–∞–≥–¥–∞–Ω–∞.");
        setBlackScreen(true);

        setTimeout(() => {
          onSubmit();
          onLogout?.();
        }, 500);
      } else {
        setDialogMessage(
          message || `‚ö†Ô∏è Tab / focus loss –∏–ª—ç—Ä–ª—ç—ç (${next}/${maxSwitch})`
        );
        setBlackScreen(true);
      }
      return next;
    });

    setTimeout(() => {
      switchLockRef.current = false;
      if (!blockedRef.current) setBlackScreen(false);
    }, 2000);
  };

  useEffect(() => {
    if (typeof window === "undefined") return;

    // Desktop + Mobile detection
    const handleBlurOrHide = () =>
      handleSwitch("‚ö†Ô∏è Tab / app switch / focus loss –∏–ª—ç—Ä–ª—ç—ç");
    const handleOrientationChange = () =>
      handleSwitch("‚ö†Ô∏è Screen orientation change –∏–ª—ç—Ä–ª—ç—ç");
    const handleKeyDown = (e: KeyboardEvent) => {
      if (e.key === "PrintScreen") {
        handleSwitch("üì∑ Screenshot desktop-–¥ –∏–ª—ç—Ä–ª—ç—ç");
      }
    };

    window.addEventListener("blur", handleBlurOrHide);
    document.addEventListener("visibilitychange", handleBlurOrHide);
    window.addEventListener("orientationchange", handleOrientationChange);
    window.addEventListener("keydown", handleKeyDown);

    return () => {
      window.removeEventListener("blur", handleBlurOrHide);
      document.removeEventListener("visibilitychange", handleBlurOrHide);
      window.removeEventListener("orientationchange", handleOrientationChange);
      window.removeEventListener("keydown", handleKeyDown);
    };
  }, []);

  const handleDialogClose = () => {
    setDialogMessage(null);
    setBlackScreen(false);
  };

  return (
    <>
      {blackScreen && (
        <div
          style={{
            position: "fixed",
            top: 0,
            left: 0,
            width: "100vw",
            height: "100vh",
            backgroundColor: "black",
            zIndex: 9999,
            display: "flex",
            alignItems: "center",
            justifyContent: "center",
            color: "white",
            fontSize: "1.5rem",
            textAlign: "center",
          }}
        >
          {blocked
            ? "üö´ –®–∞–ª–≥–∞–ª—Ç —Ö–∞–∞–≥–¥—Å–∞–Ω –±–∞–π–Ω–∞!"
            : "‚ö†Ô∏è –®–∞–ª–≥–∞–ª—Ç —Ö–∞–º–≥–∞–∞–ª–∞–ª—Ç –∏–¥—ç–≤—Ö—Ç—ç–π –±–∞–π–Ω–∞"}
        </div>
      )}

      <div className="p-4 border rounded-md shadow-md mb-4 bg-card">
        <p className="font-semibold text-sm">
          Tab / focus loss —Ç–æ–æ:{" "}
          <span
            className={
              switchCount >= maxSwitch - 1 ? "text-red-600 font-bold" : ""
            }
          >
            {switchCount}
          </span>{" "}
          / {maxSwitch}
        </p>
        {blocked && (
          <p className="text-red-600 font-bold mt-2">üö´ –®–∞–ª–≥–∞–ª—Ç —Ö–∞–∞–≥–¥—Å–∞–Ω!</p>
        )}
      </div>

      <Dialog open={!!dialogMessage}>
        <DialogContent className="max-w-sm">
          <DialogHeader>
            <DialogTitle>‚ö†Ô∏è –ê–Ω—Ö–∞–∞—Ä—É—É–ª–≥–∞</DialogTitle>
            <p>{dialogMessage}</p>
          </DialogHeader>
          <DialogFooter>
            <Button onClick={handleDialogClose}>–û–π–ª–≥–æ–ª–æ–æ</Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </>
  );
};

// -----------------------
// –¢–µ—Å—Ç —à–∞–ª–≥–∞–ª—Ç—ã–Ω —Ö—É—É–¥—Å–∞–≥
export default function TestExamPage() {
  const [submitted, setSubmitted] = useState(false);
  const [showDialog, setShowDialog] = useState(false);

  const handleSubmit = () => {
    setShowDialog(true);
    setSubmitted(true);
  };

  const handleLogout = () => {
    alert("Logout triggered (—Ç–µ—Å—Ç—ç—ç—Ä)");
  };

  return (
    <div className="p-4 max-w-3xl mx-auto space-y-6">
      <h1 className="text-2xl font-bold mb-4">
        –¢–µ—Å—Ç —à–∞–ª–≥–∞–ª—Ç (Desktop + Mobile)
      </h1>

      <ExamProctor
        userId="12345"
        onSubmit={handleSubmit}
        onLogout={handleLogout}
      />

      <Button onClick={handleSubmit} size="lg" className="w-full">
        –®–∞–ª–≥–∞–ª—Ç –¥—É—É—Å–≥–∞—Ö (—Ç–µ—Å—Ç—ç—ç—Ä)
      </Button>

      <Dialog open={showDialog} onOpenChange={setShowDialog}>
        <DialogContent className="max-w-sm">
          <DialogHeader>
            <DialogTitle>–®–∞–ª–≥–∞–ª—Ç –¥—É—É—Å—Å–∞–Ω (—Ç–µ—Å—Ç)</DialogTitle>
            <p>–®–∞–ª–≥–∞–ª—Ç –∞–º–∂–∏–ª—Ç—Ç–∞–π –¥—É—É—Å–ª–∞–∞. (–¢–µ—Å—Ç–∏–π–Ω —Ö—É–≤–∏–ª–±–∞—Ä)</p>
          </DialogHeader>
          <DialogFooter>
            <Button onClick={() => setShowDialog(false)}>–•–∞–∞—Ö</Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {submitted && (
        <p className="mt-4 text-green-600 font-semibold">
          –®–∞–ª–≥–∞–ª—Ç –¥—É—É—Å–≥–∞—Ö “Ø–π–ª–¥—ç–ª –¥—É—É—Å–ª–∞–∞ (—Ç–µ—Å—Ç)
        </p>
      )}
    </div>
  );
}
